using System.Collections.Generic;
using static Accretion.Intervals.Tests.StringConstants;

namespace Accretion.Intervals.Tests
{
    /*
    public class IntervalContainsTests
    {
        public static IEnumerable<object[]> IntervalsOfDouble { get; } = MakeCompositeIntervalsData.OfDouble(new List<(string, double, bool)>()
        {
            (Empty, 0, false),
            
            ("[-1,1]", -2, false),
            ("[-1,1]", 2, false),
            ("[-1,1]", 0, true),
            ("[-1,1]", -1, true),
            ("[-1,1]", 1, true),

            ("(-1,1]", -1, false),
            ("[-1,1)", 1, false),
            ("(-1,1)", -1, false),
            ("(-1,1)", 1, false),

            ("[-1,1]∪(2,3]", -2, false),
            ("[-1,1]∪(2,3]", -1, true),
            ("[-1,1]∪(2,3]", 0, true),
            ("[-1,1]∪(2,3]", 1, true),
            ("[-1,1]∪(2,3]", 1.5, false),
            ("[-1,1]∪(2,3]", 2, false),
            ("[-1,1]∪(2,3]", 3, true),
            ("[-1,1]∪(2,3]", 4, false),

            ("[-3,-2)∪[-1,1]", -4, false),
            ("[-3,-2)∪[-1,1]", -3, true),
            ("[-3,-2)∪[-1,1]", -2.5, true),
            ("[-3,-2)∪[-1,1]", -2, false),
            ("[-3,-2)∪[-1,1]", -1.5, false),
            ("[-3,-2)∪[-1,1]", -1, true),
            ("[-3,-2)∪[-1,1]", 0, true),
            ("[-3,-2)∪[-1,1]", 1, true),
            ("[-3,-2)∪[-1,1]", 2, false),

            ("(-3,-2]∪[-1,1)∪[2,3)", -4, false),
            ("(-3,-2]∪[-1,1)∪[2,3)", -3, false),
            ("(-3,-2]∪[-1,1)∪[2,3)", -2.5, true),
            ("(-3,-2]∪[-1,1)∪[2,3)", -2, true),
            ("(-3,-2]∪[-1,1)∪[2,3)", -1.5, false),
            ("(-3,-2]∪[-1,1)∪[2,3)", -1, true),
            ("(-3,-2]∪[-1,1)∪[2,3)", 0, true),
            ("(-3,-2]∪[-1,1)∪[2,3)", 1, false),
            ("(-3,-2]∪[-1,1)∪[2,3)", 1.5, false),
            ("(-3,-2]∪[-1,1)∪[2,3)", 2, true),
            ("(-3,-2]∪[-1,1)∪[2,3)", 2.5, true),
            ("(-3,-2]∪[-1,1)∪[2,3)", 3, false),
            ("(-3,-2]∪[-1,1)∪[2,3)", 4, false),

            ("[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", -4, false),
            ("[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", -3, true),
            ("[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", -2.5, true),
            ("[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", -2, true),
            ("[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", -1.5, false),
            ("[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", -1, false),
            ("[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", 0, true),
            ("[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", 1, false),
            ("[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", 1.5, false),
            ("[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", 2, false),
            ("[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", 2.5, true),
            ("[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", 3, false),
            ("[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", 3.5, false),
            ("[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", 4, true),
            ("[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", 4.5, true),
            ("[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", 5, true),
            ("[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", 6, false),

            ("(-5,-4]∪[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", -6, false),
            ("(-5,-4]∪[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", -5, false),
            ("(-5,-4]∪[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", -4.5, true),
            ("(-5,-4]∪[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", -4, true),
            ("(-5,-4]∪[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", -3, true),
            ("(-5,-4]∪[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", -2.5, true),
            ("(-5,-4]∪[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", -2, true),
            ("(-5,-4]∪[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", -1.5, false),
            ("(-5,-4]∪[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", -1, false),
            ("(-5,-4]∪[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", 0, true),
            ("(-5,-4]∪[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", 1, false),
            ("(-5,-4]∪[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", 1.5, false),
            ("(-5,-4]∪[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", 2, false),
            ("(-5,-4]∪[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", 2.5, true),
            ("(-5,-4]∪[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", 3, false),
            ("(-5,-4]∪[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", 3.5, false),
            ("(-5,-4]∪[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", 4, true),
            ("(-5,-4]∪[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", 4.5, true),
            ("(-5,-4]∪[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", 5, true),
            ("(-5,-4]∪[-3,-2]∪(-1,1)∪(2,3)∪[4,5]", 6, false),

            ("[-1,1]", double.NaN, false),
            ("[-1,1]", double.NegativeInfinity, false),
            ("[-1,1]", double.PositiveInfinity, false),
        });

        public static IEnumerable<object[]> IntervalsOfInt { get; } = MakeCompositeIntervalsData.OfInt(new List<(string, int, bool)>()
        {
            (Empty, 0, false),

            ("[-2,2]", -3, false),
            ("[-2,2]", 3, false),
            ("[-2,2]", 0, true),
            ("[-2,2]", -2, true),
            ("[-2,2]", 2, true),
            ("[-2,2]", 3, false),

            ("(-1,1]", -1, false),
            ("[-1,1)", 1, false),
            ("(-1,1)", -1, false),
            ("(-1,1)", 1, false),
            ("(-1,1)", 0, true),

            ("[-1,1]∪(4,6]", -2, false),
            ("[-1,1]∪(4,6]", -1, true),
            ("[-1,1]∪(4,6]", 0, true),
            ("[-1,1]∪(4,6]", 1, true),
            ("[-1,1]∪(4,6]", 2, false),
            ("[-1,1]∪(4,6]", 4, false),
            ("[-1,1]∪(4,6]", 5, true),
            ("[-1,1]∪(4,6]", 6, true),
            ("[-1,1]∪(4,6]", 7, false),

            ("[-6,-4)∪[-1,1]", -7, false),
            ("[-6,-4)∪[-1,1]", -6, true),
            ("[-6,-4)∪[-1,1]", -5, true),
            ("[-6,-4)∪[-1,1]", -4, false),
            ("[-6,-4)∪[-1,1]", -2, false),
            ("[-6,-4)∪[-1,1]", -1, true),
            ("[-6,-4)∪[-1,1]", 0, true),
            ("[-6,-4)∪[-1,1]", 1, true),
            ("[-6,-4)∪[-1,1]", 2, false),

            ("(-6,-4]∪[-1,1)∪[4,6)", -7, false),
            ("(-6,-4]∪[-1,1)∪[4,6)", -6, false),
            ("(-6,-4]∪[-1,1)∪[4,6)", -5, true),
            ("(-6,-4]∪[-1,1)∪[4,6)", -4, true),
            ("(-6,-4]∪[-1,1)∪[4,6)", -2, false),
            ("(-6,-4]∪[-1,1)∪[4,6)", -1, true),
            ("(-6,-4]∪[-1,1)∪[4,6)", 0, true),
            ("(-6,-4]∪[-1,1)∪[4,6)", 1, false),
            ("(-6,-4]∪[-1,1)∪[4,6)", 2, false),
            ("(-6,-4]∪[-1,1)∪[4,6)", 4, true),
            ("(-6,-4]∪[-1,1)∪[4,6)", 5, true),
            ("(-6,-4]∪[-1,1)∪[4,6)", 6, false),
            ("(-6,-4]∪[-1,1)∪[4,6)", 7, false),

            ("[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", -7, false),
            ("[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", -6, true),
            ("[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", -5, true),
            ("[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", -4, true),
            ("[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", -2, false),
            ("[-6,-4]∪(-1,1)∪(2,6)∪[8,10]", -1, false),
            ("[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", 0, true),
            ("[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", 1, false),
            ("[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", 2, false),
            ("[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", 4, false),
            ("[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", 5, true),
            ("[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", 6, false),
            ("[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", 7, false),
            ("[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", 8, true),
            ("[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", 9, true),
            ("[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", 10, true),
            ("[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", 12, false),

            ("(-12,-10]∪[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", -13, false),
            ("(-12,-10]∪[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", -12, false),
            ("(-12,-10]∪[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", -11, true),
            ("(-12,-10]∪[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", -10, true),
            ("(-12,-10]∪[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", -7, false),
            ("(-12,-10]∪[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", -6, true),
            ("(-12,-10]∪[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", -5, true),
            ("(-12,-10]∪[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", -4, true),
            ("(-12,-10]∪[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", -2, false),
            ("(-12,-10]∪[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", -1, false),
            ("(-12,-10]∪[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", 0, true),
            ("(-12,-10]∪[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", 1, false),
            ("(-12,-10]∪[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", 2, false),
            ("(-12,-10]∪[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", 4, false),
            ("(-12,-10]∪[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", 5, true),
            ("(-12,-10]∪[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", 6, false),
            ("(-12,-10]∪[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", 7, false),
            ("(-12,-10]∪[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", 8, true),
            ("(-12,-10]∪[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", 9, true),
            ("(-12,-10]∪[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", 10, true),
            ("(-12,-10]∪[-6,-4]∪(-1,1)∪(4,6)∪[8,10]", 11, false),
        });

        [Theory]
        [MemberData(nameof(IntervalsOfDouble))]
        public void TestPrimitiveContinuousContains(Interval<double> interval, double value, bool expectedResult) => Assert.Equal(expectedResult, interval.Contains(value));

        [Theory]
        [MemberData(nameof(IntervalsOfInt))]
        public void TestPrimitiveDiscreteContains(Interval<int> interval, int value, bool expectedResult) => Assert.Equal(expectedResult, interval.Contains(value));
    }
    */
}
